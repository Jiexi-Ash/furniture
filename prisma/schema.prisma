generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  createdAt  DateTime    @default(now())
  orderKey   String      @unique
  updatedAt  DateTime    @updatedAt
  orderDate  DateTime    @default(now())
  checkoutId String?
  total      Float       @default(0)
  status     OrderStatus @default(PENDING)
  OrderItem  OrderItem[]
  shipping   shipping?   @relation(fields: [shippingId], references: [id])
  shippingId String?

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   Int
  productId Int
  quantity  Int
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  features    String
  price       Float
  quantity    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dimensions  String
  OrderItem   OrderItem[]
  CartItem    CartItem[]
  isActive    Boolean     @default(false)
  Image       Image[]
  category    category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  url       String
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model user {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  email     String     @unique
  role      Role       @default(USER)
  Cart      Cart[]
  shipping  shipping[]
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  userId    String?
  User      user?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  productId Int
  quantity  Int
  Cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model category {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  name      String    @unique
  Product   Product[]
}

model shipping {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  firstName          String
  lastName           String
  address            String
  city               String
  province           String
  complexOrApartment String?
  postcode           Int
  country            String
  phone              Int
  user               user     @relation(fields: [userId], references: [id])
  userId             String
  Order              Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}
